<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 解析db.properties 因为 db.properties里面有username=root
	如果在下面的数据源中使用${username}它取到的是当前系统的登陆名
		如果要使用db.properties里面的username必须加system-properties-mode="FALLBACK"这个属性 -->
	<context:property-placeholder location="classpath:db.properties"
		system-properties-mode="FALLBACK" />


	<!-- 配置数据源 -->
	<bean id="dataSource"
		  class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}?useUnicode=true&amp;characterEncoding=UTF-8&amp;" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 最大并发连接数 -->
		<property name = "maxActive" value = "${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name = "initialSize" value = "${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name = "maxWait" value = "${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name = "minIdle" value = "${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />
		<!--        <property name = "validationQuery" value = "${validationQuery}" />     -->
		<property name = "testWhileIdle" value = "${testWhileIdle}" />
		<property name = "testOnBorrow" value = "${testOnBorrow}" />
		<property name = "testOnReturn" value = "${testOnReturn}" />
		<property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandoned" value = "${removeAbandoned}" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name = "logAbandoned" value = "${logAbandoned}" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
				<ref bean="log-filter"/>
			</list>
		</property>
	</bean>
	<!-- 慢SQL记录 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
		<property name="slowSqlMillis" value="2000"/>
		<property name="logSlowSql" value="true"/>
	</bean>

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="dataSourceLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>



	<bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">
		<property name="deleteAllow" value="false" />
		<property name="truncateAllow" value="false" />
		<property name="dropTableAllow" value="false" />
		<property name="alterTableAllow" value="false" />
		<property name="deleteWhereNoneCheck" value="false" />
		<property name="updateWhereNoneCheck" value="false" />
	</bean>
	<!-- druid  spring监控   start -->
	<bean id="druid-stat-interceptor"
		  class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		  scope="prototype">
		<property name="patterns">
			<list>
				<value>classpath:com/mapper/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- druid  spring监控   end -->
	<!-- 配置sqlSessinoFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!--mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml" />
		<!--扫描 XXXmapper.xml映射文件,配置扫描的路径 这个不配置也可以，但是不配置的话，
		下面dao和xxxMapper.xml必须放在同一个包下面 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:com/mapper/*.xml</value>
			</array>
		</property>

	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找之中的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zh.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

</beans>